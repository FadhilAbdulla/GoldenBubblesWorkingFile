// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  firstName         String
  lastName          String
  password          String
  phone             String
  active            Boolean  @default(true)
  approved          Boolean  @default(false)
  email_verified    Boolean  @default(false)
  phone_verified    Boolean  @default(false)
  passportDoc       String?
  emiratesIdDoc     String?
  proofOfAddressDoc String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  documents      userDocument[]
  BankAccount    BankAccount[]
  TradingAccount TradingAccount[]

  @@map("users")
}

model Document {
  id           String @id @default(cuid())
  documentType Int
  originalKey  String
  generatedKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userDocument userDocument[]
}

model userDocument {
  id         String @id @default(cuid())
  userId     String
  documentId String

  user     User     @relation(fields: [userId], references: [id])
  document Document @relation(fields: [documentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankAccount {
  id            String @id @default(cuid())
  userId        String
  accountNumber String
  IBAN          String
  BankName      String
  Branch        String

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TradingAccount {
  id                 String @id @default(cuid())
  userId             String
  tradingAccountType Int
  username           String @unique
  password           String
  active        Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArkAuthToken {
  id          String   @id @default(cuid())
  token       String
  createdAt   DateTime @default(now())
  lastupdated DateTime @default(now())
}

// All money transaction should be logged